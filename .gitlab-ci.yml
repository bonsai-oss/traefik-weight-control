---
stages:
  - test
  - build
  - release

lint:
  image: registry.gitlab.com/gitlab-org/gitlab-build-images:golangci-lint-alpine
  allow_failure: true
  stage: test
  script:
    - golangci-lint run ./... --issues-exit-code 0 --out-format code-climate | tee gl-code-quality-report.json | jq -r '.[] | "\(.location.path):\(.location.lines.begin) \(.description)"'
  artifacts:
    reports:
      codequality: gl-code-quality-report.json
    paths:
      - gl-code-quality-report.json

vulnerability_check:
  image: golang:latest
  stage: test
  allow_failure: true
  before_script:
    - go install golang.org/x/vuln/cmd/govulncheck@latest
  script:
    - govulncheck ./...
  needs:
    - lint

go_fmt:
  image: golang
  stage: test
  script:
    - go fmt ./...

go_test:
  image: golang:latest
  stage: test
  before_script:
    - go install gotest.tools/gotestsum@latest
  script:
    - go test -v ./... -coverprofile=coverage.txt -covermode count
    - go tool cover -func coverage.txt
    - go get github.com/boumenot/gocover-cobertura
    - go run github.com/boumenot/gocover-cobertura < coverage.txt > coverage.xml
    - /go/bin/gotestsum --junitfile report.xml --format testname
  coverage: '/^total:\t+\(statements\)\t+(\d+\.\d+)%/'
  artifacts:
    when: always
    reports:
      junit: report.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml

semantic_release:
  image: registry.fsrv.services/fsrvcorp/container/payipi:latest
  stage: release
  variables:
    GIT_STRATEGY: clone
    GIT_DEPTH: 0
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  script:
    - get-next-version -f json
    - VERSION="$(get-next-version -f json --prefix 'v' | jq -r 'select(.hasNextVersion==true) | .version')"
    - echo $VERSION
    - test -z "$VERSION" || curl --silent --request POST --header "PRIVATE-TOKEN:${CI_BOT_TOKEN}" "https://${CI_SERVER_HOST}/api/v4/projects/${CI_PROJECT_ID}/repository/tags?tag_name=${VERSION}&ref=${CI_DEFAULT_BRANCH}" | jq

debian packagebuild:
  stage: release
  image: registry.fsrv.services/fsrvcorp/container/debian-build:latest
  variables:
    CGO_ENABLED: 0
  rules:
    - if: $CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+$/
  parallel:
    matrix:
      - GOOS: linux
        GOARCH: [ amd64, arm64 ]
  before_script:
    - apt update && apt install -y binutils-aarch64-linux-gnu
    - go build -o aectl -ldflags="-s -w -X main.version=${CI_COMMIT_TAG}" -trimpath ./cmd/aectl
  script:
    - export VERSION="$(echo $CI_COMMIT_TAG | sed 's/^v//')"
    - sed -i "s/%VERSION%/$VERSION/g" debian/changelog
    - sed -i "s/%ARCHITECTURE%/$GOARCH/g" debian/control
    - mkdir package && mv debian package
    - (cd package && dpkg-buildpackage -rfakeroot -b -uc -us --host-arch $GOARCH)
  artifacts:
    paths:
      - "*.deb"